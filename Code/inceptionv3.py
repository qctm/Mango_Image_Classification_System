# -*- coding: utf-8 -*-
"""InceptionV3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d-ffUj7-k9jNSQO6Ua5RwbNYFTLFPGuL
"""

from google.colab import drive
drive.mount('/content/drive/')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/ThucTap/

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import cv2
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.utils import np_utils

import tensorflow as tf
from tensorflow import keras
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import InceptionV3, MobileNet, VGG16, DenseNet121, EfficientNetB7
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from keras import layers
from keras import models

path = "../ThucTap/Images/Train/"

categories = ['BiHu', 'ChuaChin', 'DaChin']

# Hien thi hinh anh
for category in categories:
    fig, _ = plt.subplots(3, 4)
    fig.suptitle(category)
    for k, v in enumerate(os.listdir(path+category)[:12]):
        img = plt.imread(path + category + '/' + v)
        plt.subplot(3,4, k+1)
        plt.axis('off')
        plt.imshow(img)
    plt.show()

# 1.4 get shape
shape0 = []
shape1 = []

for category in categories:
    for files in os.listdir(path+category):
        shape0.append(plt.imread(path+category+'/'+files).shape[0])
        shape1.append(plt.imread(path+category+'/'+files).shape[1])
    print(category, ' => height min : ', min(shape0), 'width min : ', min(shape1))
    print(category, ' => height max : ', max(shape0), 'width min : ', max(shape1))
    shape0 = []
    shape1 = []

# 1.5
data = []
labels = []
imagePaths = []

HEIGHT = 128 #
WIDTH = 128 #
N_CHANNELS = 3

for k, category in enumerate(categories):
    for f in os.listdir(path+category):
        imagePaths.append([path+category+'/'+f, k])

import random
random.shuffle(imagePaths)
print(imagePaths[:10])

for imagePath in imagePaths:
    image = cv2.imread(imagePath[0])
    image = cv2.resize(image, (WIDTH, HEIGHT))
    data.append(image)

    label = imagePath[1]
    labels.append(label)

# 1.6
data = np.array(data, dtype="float") / 255.0
labels = np.array(labels)

#1.7
plt.subplots(3,4)
for i in range(12):
    plt.subplot(3, 4, i+1)
    plt.imshow(data[i])
    plt.axis('off')
    plt.title(categories[labels[i]])
plt.show()

#1.8
(trainX, testX, trainY, testY) = train_test_split(data, labels, test_size=0.2, random_state=32)

#1.9
trainY = np_utils.to_categorical(trainY, 3)

print(trainX.shape)
print(testX.shape)
print(trainY.shape)
print(testY.shape)

# Kien truc InceptionV3
EPOCHS = 30
INIT_LR = 1e-3
BS = 32

class_name = categories

print("[INFO] compiling model...")
inceptionv3 = InceptionV3(input_shape=(128, 128, 3), include_top=False, weights='imagenet')
for layer in inceptionv3.layers:
  layer.trainable = False

model = Sequential()
model.add(inceptionv3)

model.add(GlobalAveragePooling2D())
model.add(layers.Dropout(0.5))
model.add(layers.Flatten())
model.add(layers.Dense(len(class_name), activation='softmax'))

opt = tf.keras.optimizers.legacy.Adam(learning_rate=INIT_LR, decay=INIT_LR / EPOCHS)
model.compile(loss="categorical_crossentropy", optimizer=opt, metrics=["accuracy"])
model.summary()

# train
model.fit(trainX, trainY, batch_size=BS, epochs=EPOCHS, verbose=1)

# 1.12 danh gia mo hinh
from numpy import argmax
from sklearn.metrics import confusion_matrix, accuracy_score

pred = model.predict(testX)
predictions = argmax(pred, axis=1)

cm = confusion_matrix(testY, predictions)

fig = plt.figure()
ax = fig.add_subplot(111)
cax = ax.matshow(cm)
plt.title("model confusion matrix")
fig.colorbar(cax)
ax.set_xticklabels(['']+ categories)
ax.set_yticklabels(['']+ categories)

for i in range(3):
    for j in range(3):
        ax.text(i, j, cm[i, j], va='center', ha='center')

plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

accuracy = accuracy_score(testY, predictions)
print("Accuracy: %.2f%%" % (accuracy*100.0))

# 1.13 Chay ket qua
from numpy import argmax
from tensorflow.keras.preprocessing import image
img_path = "/content/drive/MyDrive/ThucTap/Images/Test/a2.jpg"

img = image.load_img(img_path, target_size=(128,128))
img_array = image.img_to_array(img)

from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions

img_batch = np.expand_dims(img_array, axis=0)
img_preprocessed = preprocess_input(img_batch)

pred = model.predict(img_preprocessed)
Res = argmax(pred, axis=1)
print(pred)
print(Res)

Result_Text = "{0}({1})".format(categories[Res[0]], round(pred[0][Res[0]]*100,2))

plt.text(10,10, Result_Text, color= "blue", fontsize="large", bbox=dict(fill = False, edgecolor='red', linewidth=1))
plt.imshow(img)
plt.show()
print(categories[Res[0]], pred[0][Res[0]]*100)

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/ThucTap/
model.save("InceptionV3_2.h5")

from sklearn.metrics import precision_recall_fscore_support as score
accuracy = accuracy_score(testY, predictions)
print("Accuracy : %.2f%%" % (accuracy*100.0))
precision, recall, fscore, support = score(testY, predictions)
print('precision: {}'.format(precision))
print('recall: {}'.format(recall))
print('fscore: {}'.format(fscore))
print('support: {}'.format(support))

"""MobileNET
800 anh

Epochs-DoChinhXac

20-8812

30-8375
40
50
"""